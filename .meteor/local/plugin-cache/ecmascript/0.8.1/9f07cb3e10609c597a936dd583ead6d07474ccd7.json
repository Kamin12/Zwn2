{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":["message"],"specifiers":[{"kind":"local","local":"message","exported":"default"}]}}},"options":{"filename":"imports/ui/components/insert-message.js","filenameRelative":"imports/ui/components/insert-message.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/ui/components/insert-message.js.map","sourceFileName":"imports/ui/components/insert-message.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"insert-message"},"ignored":false,"code":"var _insertMessage = function (message) {\n  return Messages.insert(message);\n};\n\nvar _escapeUnwantedMarkdown = function (message) {\n  // Escape h1-h6 tags and inline images ![]() in Markdown.\n  return message.replace(/#/g, '&#35;').replace(/(!\\[.*?\\]\\()(.*?)(\\))+/g, '&#33;&#91;&#93;&#40;&#41;');\n};\n\nvar _cleanUpMessageBeforeInsert = function (message) {\n  delete message.destination;\n  delete message.isDirect;\n  message.message = _escapeUnwantedMarkdown(message.message);\n};\n\nvar _getChannelId = function (channelName) {\n  var channel = Channels.findOne({\n    name: channelName\n  });\n\n  if (channel) {\n    return channel._id;\n  }\n};\n\nvar _getUserId = function (username) {\n  var user = Meteor.users.findOne({\n    username: username\n  });\n\n  if (user) {\n    return user._id;\n  }\n};\n\nvar _assignDestination = function (message) {\n  if (message.isDirect) {\n    message.to = _getUserId(message.destination);\n  } else {\n    var channelId = _getChannelId(message.destination);\n\n    message.channel = channelId;\n  }\n};\n\nvar _checkIfSelf = function (_ref) {\n  var destination = _ref.destination,\n      owner = _ref.owner;\n  return destination === owner;\n};\n\nvar _assignOwnerAndTimestamp = function (message) {\n  message.owner = Meteor.userId();\n  message.timestamp = new Date();\n};\n\nmodule.exportDefault(function (message) {\n  _assignOwnerAndTimestamp(message);\n\n  if (!_checkIfSelf(message)) {\n    _assignDestination(message);\n\n    _cleanUpMessageBeforeInsert(message);\n\n    _insertMessage(message);\n  } else {\n    throw new Meteor.Error('500', 'Can\\'t send messages to yourself.');\n  }\n});","map":{"version":3,"sources":["imports/ui/components/insert-message.js"],"names":["_insertMessage","message","Messages","insert","_escapeUnwantedMarkdown","replace","_cleanUpMessageBeforeInsert","destination","isDirect","_getChannelId","channelName","channel","Channels","findOne","name","_id","_getUserId","username","user","Meteor","users","_assignDestination","to","channelId","_checkIfSelf","owner","_assignOwnerAndTimestamp","userId","timestamp","Date","module","exportDefault","Error"],"mappings":"AAAA,IAAIA,iBAAiB,UAAEC,OAAF,EAAe;AAClC,SAAOC,SAASC,MAAT,CAAiBF,OAAjB,CAAP;AACD,CAFD;;AAIA,IAAIG,0BAA0B,UAAEH,OAAF,EAAe;AAC3C;AACA,SAAOA,QACNI,OADM,CACG,IADH,EACS,OADT,EAENA,OAFM,CAEG,yBAFH,EAE8B,2BAF9B,CAAP;AAGD,CALD;;AAOA,IAAIC,8BAA8B,UAAEL,OAAF,EAAe;AAC/C,SAAOA,QAAQM,WAAf;AACA,SAAON,QAAQO,QAAf;AACAP,UAAQA,OAAR,GAAkBG,wBAAyBH,QAAQA,OAAjC,CAAlB;AACD,CAJD;;AAMA,IAAIQ,gBAAgB,UAAEC,WAAF,EAAmB;AACrC,MAAIC,UAAUC,SAASC,OAAT,CAAkB;AAAEC,UAAMJ;AAAR,GAAlB,CAAd;;AACA,MAAKC,OAAL,EAAe;AACb,WAAOA,QAAQI,GAAf;AACD;AACF,CALD;;AAOA,IAAIC,aAAa,UAAEC,QAAF,EAAgB;AAC/B,MAAIC,OAAOC,OAAOC,KAAP,CAAaP,OAAb,CAAsB;AAAEI,cAAUA;AAAZ,GAAtB,CAAX;;AACA,MAAKC,IAAL,EAAY;AACV,WAAOA,KAAKH,GAAZ;AACD;AACF,CALD;;AAOA,IAAIM,qBAAqB,UAAEpB,OAAF,EAAe;AACtC,MAAKA,QAAQO,QAAb,EAAwB;AACtBP,YAAQqB,EAAR,GAAaN,WAAYf,QAAQM,WAApB,CAAb;AACD,GAFD,MAEO;AACL,QAAIgB,YAAYd,cAAeR,QAAQM,WAAvB,CAAhB;;AACAN,YAAQU,OAAR,GAAkBY,SAAlB;AACD;AACF,CAPD;;AASA,IAAIC,eAAe,gBAA8B;AAAA,MAA1BjB,WAA0B,QAA1BA,WAA0B;AAAA,MAAbkB,KAAa,QAAbA,KAAa;AAC/C,SAAOlB,gBAAgBkB,KAAvB;AACD,CAFD;;AAIA,IAAIC,2BAA2B,UAAEzB,OAAF,EAAe;AAC5CA,UAAQwB,KAAR,GAAoBN,OAAOQ,MAAP,EAApB;AACA1B,UAAQ2B,SAAR,GAAoB,IAAIC,IAAJ,EAApB;AACD,CAHD;;AA5CAC,OAAOC,aAAP,CAiDe,UAAU9B,OAAV,EAAoB;AACjCyB,2BAA0BzB,OAA1B;;AAEA,MAAK,CAACuB,aAAcvB,OAAd,CAAN,EAAgC;AAC9BoB,uBAAoBpB,OAApB;;AACAK,gCAA6BL,OAA7B;;AACAD,mBAAgBC,OAAhB;AACD,GAJD,MAIO;AACL,UAAM,IAAIkB,OAAOa,KAAX,CAAkB,KAAlB,EAAyB,mCAAzB,CAAN;AACD;AACF,CA3DD","file":"imports/ui/components/insert-message.js.map","sourcesContent":["let _insertMessage = ( message ) => {\n  return Messages.insert( message );\n};\n\nlet _escapeUnwantedMarkdown = ( message ) => {\n  // Escape h1-h6 tags and inline images ![]() in Markdown.\n  return message\n  .replace( /#/g, '&#35;' )\n  .replace( /(!\\[.*?\\]\\()(.*?)(\\))+/g, '&#33;&#91;&#93;&#40;&#41;' );\n};\n\nlet _cleanUpMessageBeforeInsert = ( message ) => {\n  delete message.destination;\n  delete message.isDirect;\n  message.message = _escapeUnwantedMarkdown( message.message );\n};\n\nlet _getChannelId = ( channelName ) => {\n  let channel = Channels.findOne( { name: channelName } );\n  if ( channel ) {\n    return channel._id;\n  }\n};\n\nlet _getUserId = ( username ) => {\n  let user = Meteor.users.findOne( { username: username } );\n  if ( user ) {\n    return user._id;\n  }\n};\n\nlet _assignDestination = ( message ) => {\n  if ( message.isDirect ) {\n    message.to = _getUserId( message.destination );\n  } else {\n    let channelId = _getChannelId( message.destination );\n    message.channel = channelId;\n  }\n};\n\nlet _checkIfSelf = ( { destination, owner } ) => {\n  return destination === owner;\n};\n\nlet _assignOwnerAndTimestamp = ( message ) => {\n  message.owner     = Meteor.userId();\n  message.timestamp = new Date();\n};\n\nexport default function( message ) {\n  _assignOwnerAndTimestamp( message );\n\n  if ( !_checkIfSelf( message ) ) {\n    _assignDestination( message );\n    _cleanUpMessageBeforeInsert( message );\n    _insertMessage( message );\n  } else {\n    throw new Meteor.Error( '500', 'Can\\'t send messages to yourself.' );\n  }\n}\n"]},"hash":"9f07cb3e10609c597a936dd583ead6d07474ccd7"}
